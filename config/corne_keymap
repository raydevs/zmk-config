/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include <dt-bindings/zmk/ext_power.h>

#include "./helper.h"
#include "./keypos_42keys.h"
#include "../features/behaviors.dtsi"

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3
#define LOCK 4
#define MAINT 5


ZMK_UNICODE_SINGLE(euro_sign, N2, N0, A, C)                 // €
ZMK_UNICODE_PAIR(n_tilde,   N0, N0, F, N1,   N0, N0, D, N1) // ñ/Ñ

// combos
#undef COMBO_TERM
#define COMBO_TERM 40  // timeout of 40ms (default is 30ms if omitted)
ZMK_COMBO(combo_sleep,  &win_sleep, RT3 RT4, NAV)  // custom sleep macro, only active on NAV layer
ZMK_COMBO(combo_copy,   &kp LC(C),  LB2 LB3, ALL)  // Ctrl + C, active on all layers
ZMK_COMBO(combo_paste,  &kp LC(V),  LB1 LB2, ALL)  // Ctrl + V, active on all layers

/ {
    macros {
        numdot: numdot {
            label = "ZM_numdot";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N4 &kp KP_N6>
                , <&macro_release &kp LALT>
                ;
        };
        grtsgn: grtsgn {
            label = "ZM_grtsgn";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N6 &kp KP_N2>
                , <&macro_release &kp LALT>
                ;
        };
    };
};
/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
        // -----------------------------------------------------------------------------------------
        // | TAB caps |  Q  |  W  |  E  |  R       |  T  |   |  Y    |  U      |  I  |  O   |  P    | BKSP      |
        // | SHFT <   |  A  |  S  |  D  |  F gui   |  G  |   |  H    |  J gui  |  K  |  L   |  ; ñ  |  '  ralt  |
        // | CTRL >   |  Z  |  X  |  C  |  V       |  B  |   |  N    |  M      |  ,  |  .:  |  /\   | ESC rctrl |
        //                        | GUI | LWR lock | SPC |   | ENT   | RSE maint | DEL ADJ |
                        bindings = <
&mt CAPS TAB  &kp Q &kp W &kp E &kp R        &kp T            &kp Y     &kp U         &kp I     &kp O         &kp P              &kp BSPC
&mt LSHFT LT  &kp A &kp S &kp D &mt LGUI F   &kp G            &kp H     &mt RGUI J    &kp K     &kp L         &mt &n_tilde SEMI  &mt RALT SQT
&mt LCTRL GT  &kp Z &kp X &kp C &kp V        &kp B            &kp N     &kp M         &kp COMMA &mt COLON DOT &mt BSLH FSLH      &mt RCTRL SCAPE
                          &lt   &lt LOCK LWR &kp SPACE        &kp ENTER &mt MAINT RSE &lt ADJ DEL
                        >;
                };
                lower_layer {
                        label = "LWR";
                        bindings = <
 &mt LWIN CAPS   &kp KP_MULTIPLY  &kp N7 &kp N8      &kp N9  &kp PLUS      &kp EXCL      &kp AT    &kp HASH   &kp DLLR  &kp PRCNT &mt RWIN F1
 &mt LCTRL K_APP &kp KP_SLASH     &kp N4 &kp N5      &kp N6  &kp MINUS     &kp CARET     &kp AMPS  &kp STAR   &kp LPAR  &kp RPAR  &mt RCTRL F2
 &mt LALT EQUAL  &kp N0           &kp N1 &kp N2      &kp N3  &numdot       &kp LG(SPACE) &kp F4    &kp F5     &kp F6    &kp F7    &mt RALT F3
                                         &lt ADJ TAB &trans  &trans        &trans        &trans    &lt ADJ DEL
                        >;
                };
                raise_layer {
                        label = "RSE";
                        bindings = <
&kp LWIN   &kp C_VOL_UP   &kp PG_UP  &kp C_PP       &kp HOME &kp C_PAUSE    &kp N0      &kp HOME  &kp C_PP    &kp PG_UP  &kp C_VOL_UP  &kp RWIN
&kp LCTRL  &kp C_VOL_DN   &kp LEFT   &kp UP         &kp DOWN &kp RIGHT      &kp LEFT    &kp DOWN  &kp UP      &kp RIGHT  &kp C_VOL_DN  &kp RCTRL
&kp LALT   &kp C_MUTE     &kp PG_DN  &kp LG(LS(S))  &kp END  &kp C_PLAY     &kp N0      &kp END   &grtsgn     &kp PG_DN  &kp C_MUTE    &kp RALT
                          &trans     &trans         &lt ADJ RET             &lt ADJ ESC &trans    &trans
                        >;
                };
                                adjust_layer {
                        bindings = <
&bootloader           &none         &none        &none        &none        &none          &none        &none        &none        &none        &none         &bootloader
&bt BT_CLR            &bt BT_SEL 0  &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &bt BT_SEL 4 &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0  &bt BT_CLR
&ext_power EP_OFF     &kp KP_NUM    &none        &none        &none        &none          &bt BT_PRV   &none        &bt BT_NXT   &kp C_POWER  &none         &ext_power EP_OFF
                                                 &trans       &none        &trans         &trans       &none        &trans
                        >;
                };
                lock_layer {
                        label = "LOCK";
                        bindings = <
&none   &none   &none   &none   &none    &none   &none   &none   &none   &none   &none   &none
&none   &none   &none   &none   &none    &none   &none   &none   &none   &none   &none   &none
&none   &none   &none   &none   &none    &none   &none   &none   &none   &none   &none   &none
                        &none   &trans   &none   &none   &trans  &none
                        >;
                };
                maintenance_layer {
                        label = "MAINT";
                        bindings = <
&none   &none   &none   &none           &none           &none           &none           &none         &kp LC(LG(Q))   &kp C_SLEEP   &none         &none
&none   &none   &none   &none           &none           &bootloader     &bootloader     &none         &none           &tog LOCK_KB  &kp C_POWER   &none
&none   &none   &none   &none           &none           &none           &none           &bt BT_SEL 0  &bt BT_PRV      &bt BT_NXT    &bt BT_CLR    &none
                        &trans          &trans          &trans          &trans          &trans        &trans
                        >;
                };
        };
};
 */